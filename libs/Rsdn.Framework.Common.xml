<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rsdn.Framework.Common</name>
    </assembly>
    <members>
        <member name="T:Rsdn.Framework.Data.DbManager">
            <summary>
            Implements access to the database.
            </summary>
            <example>
            <code>
            public class MyClass
            {
                public static void Main()
                {
                    using (DbManager db = DbManager.Open())
                    {
                        db.ExecuteNonQuery("SELECT * FROM ACC_Account");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnDisposableMbrObject">
            <summary>
            The base class for MBR disposable objects.
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.DisposableMbrObject">
            <summary>
            Base class for MBR classes that need to be disposed.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableMbrObject.Finalize">
            <summary>
            Clean up all resources.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableMbrObject.Dispose">
            <summary>
            Clean up all resources and delete object from the finalization queue.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableMbrObject.Close">
            <summary>
            Synonym of the Dispose method.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableMbrObject.Reopen">
            <summary>
            Must be called if object reopen any resources to return the object in the finalization queue.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableMbrObject.Dispose(System.Boolean)">
            <summary>
            Can be overridden in child classes.
            </summary>
            <param name="disposing">Equal 'true' if is called from Dispose method, otherwise from destructor</param>
        </member>
        <member name="T:Rsdn.Framework.Common.IRsdnObject">
            <summary>
            Common RSDN interface.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>Current object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified IsolationLevel value.
            </summary>
            <param name="il">One of the IsolationLevel values.</param>
            <returns>Current object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.OpenConnection">
            <summary>
            Opens a database connection with the default settings.
            </summary>
            <returns>Current object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.OpenConnection(System.String)">
            <summary>
            Opens a database connection with the settings specified by the configString parameter.
            </summary>
            <param name="configString">The configuration string.</param>
            <returns>Current object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.CreateConnectionObject">
            <summary>
            Creates the connection object.
            </summary>
            <returns>The connection object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.CreateDataAdapterObject">
            <summary>
            Creates the data adapter object.
            </summary>
            <returns>The data adapter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Populates the specified IDbCommand object's Parameters collection with 
            parameter information for the stored procedure specified in the IDbCommand.
            </summary>
            <param name="command">The IDbCommand referencing the stored procedure for which the parameter information is to be derived. The derived parameters will be populated into the Parameters of this command.</param>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.CreateParameters(System.Object,System.Data.IDbDataParameter[])">
            <summary>
            Creates an array of parameters from the business object.
            </summary>
            <param name="entity">A business object.</param>
            <param name="commandParameters">An array of paramters to be added to the result array.</param>
            <returns>An array of parameters.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Parameter(System.String)">
            <summary>
            Returns existing parameter.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Parameter(System.String,System.Object)">
            <summary>
            Creates an input parameter to IDbCommand object.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The System.Object that is the value of the parameter.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.NullParameter(System.String,System.Object)">
            <summary>
            Creates a new instance of an input parameter.
            </summary>
            <remarks>
            If the parameter is blank, it's converted to 'NULL' SQL value.
            </remarks>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The System.Object that is the value of the parameter.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.InputParameter(System.String,System.Object)">
            <summary>
            Creates an input parameter to IDbCommand object.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The System.Object that is the value of the parameter.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.OutputParameter(System.String)">
            <summary>
            Creates an output parameter to IDbCommand object.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.InputOutputParameter(System.String,System.Object)">
            <summary>
            Creates an input-output parameter to IDbCommand object.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The System.Object that is the value of the parameter.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ReturnValue(System.String)">
            <summary>
            Creates a return value to IDbCommand object.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Parameter(System.Data.ParameterDirection,System.String,System.Object)">
            <summary>
            Creates a parameter to IDbCommand object.
            </summary>
            <param name="parameterDirection">One the System.Data.ParameterDirection values.</param>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">The System.Object that is the value of the parameter.</param>
            <returns>The parameter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.GetCommand(System.Data.CommandType,System.String)">
            <summary>
            Helper function. Creates the command object and sets command type and command text.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="sql">The SQL statement.</param>
            <returns>The command object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.AttachParameters(System.Data.IDbCommand,System.Data.IDbDataParameter[])">
            <summary>
            This method is used to attach array of IDbDataParameter to a IDbCommand.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of IDbDataParameters tho be added to command</param>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.DiscoverSpParameterSet(System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.CloneParameters(System.Data.IDbDataParameter[])">
            <summary>
            Copies cached parameter array.
            </summary>
            <param name="originalParameters">The original parameter array.</param>
            <returns>The result array.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.GetSpParameterSet(System.String,System.Boolean)">
            <summary>
            Retrieves the set of parameters appropriate for the stored procedure.
            </summary>
            <remarks>
            This method will query the database for this information, 
            and then store it in a cache for future requests.
            </remarks>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results.</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.AssignParameterValues(System.Data.IDbDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters.
            </summary>
            <param name="commandParameters">array of IDbDataParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Prepare(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Prepares a command for execution.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Prepare(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Prepares a command for execution.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery(System.String)">
            <summary>
            Executes a SQL statement, and returns the number of rows affected.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes a SQL statement, and returns the number of rows affected.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery">
            <summary>
            Execute a SQL statement using prepared parameters.
            </summary>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) 
            using the provided parameter values. This method will query the database 
            to discover the parameters for the stored procedure (the first time each 
            stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar(System.String)">
            <summary>
            Executes the query, and returns the first column of the first row in 
            the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the query, and returns the first column of the first row in the 
            resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query using the provided parameters, 
            and returns the first column of the first row in the resultset 
            returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query using the provided parameters, and returns 
            the first column of the first row in the resultset returned 
            by the query. Extra columns or rows are ignored.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar">
            <summary>
            Executes the query, and returns 
            the first column of the first row in the resultset returned 
            by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) 
            using the provided parameter values. This method will query the database 
            to discover the parameters for the stored procedure (the first time each 
            stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader(System.String)">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the command and builds an IDataReader.
            </summary>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An IDataReader object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet. 
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataSet using the provided parameters.
            </summary>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet">
            <summary>
            Execute a SQL statement using the prepared parameters.
            </summary>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="spName">The name of the stored prcedure</param>
            <param name="commandParameters">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataSet using the provided parameters.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet)">
            <summary>
            Execute a SQL statement using the prepared parameters.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataSet(System.Data.DataSet,System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="commandParameters">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet. 
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataSet using the provided parameters.
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String)">
            <summary>
            Execute a SQL statement using the prepared parameters.
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.String,System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="tableName">The name of the populating table.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="commandParameters">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataSet.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The text command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataSet using the provided parameters.
            </summary>
            <param name="dataSet">The input DataSet object.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.Int32,System.Int32,System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The DataSet object to populate.</param>
            <param name="maxRecords ">The maximum number of records to retrieve.</param>
            <param name="startRecord">The zero-based record number to start with.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The DataSet object to populate.</param>
            <param name="startRecord">The zero-based record number to start with.</param>
            <param name="maxRecords ">The maximum number of records to retrieve.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.Int32,System.Int32,System.String)">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The DataSet object to populate.</param>
            <param name="startRecord">The zero-based record number to start with.</param>
            <param name="maxRecords ">The maximum number of records to retrieve.</param>
            <param name="tableName">The name of the populating table.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteNamedDataSet(System.Data.DataSet,System.String,System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataSet">The DataSet object to populate.</param>
            <param name="tableName">The name of the populating table.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.String)">
            <summary>
            Execute a SQL command that returns a DataTable.
            </summary>
            <param name="commandText">The text command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataTable. 
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The text command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataTable using the provided parameters.
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="spName">The name of the stored prcedure</param>
            <param name="commandParameters">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable,System.String)">
            <summary>
            Execute a SQL command that returns a DataTable.
            </summary>
            <param name="dataTable">The input DataTable object.</param>
            <param name="commandText">The text command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a DataTable.
            </summary>
            <param name="dataTable">The input DataTable object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The text command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a DataTable using the provided parameters.
            </summary>
            <param name="dataTable">The input DataTable object.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataTable">The DataTable object to populate.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable)">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataTable">The DataTable object to populate.</param>
            <returns>The number of rows affected by the command.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteDataTable(System.Data.DataTable,System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="dataTable">The DataTable object to populate.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataTable object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.String)">
            <summary>
            Execute a SQL command that returns a business entity.
            </summary>
            <param name="entity">The input object.</param>
            <param name="commandText">The text command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a business entity.
            </summary>
            <param name="entity">The input object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The text command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a business entity using the provided parameters.
            </summary>
            <param name="entity">The input object.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="entity">An object to populate.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object)">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="entity">An object to populate.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.String,System.Object[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="entity">An object to populate.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type,System.String)">
            <summary>
            Execute a SQL command that returns a business entity.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The text command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type,System.Data.CommandType,System.String)">
            <summary>
            Execute a SQL command that returns a business entity.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The text command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL command that returns a business entity using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type)">
            <summary>
            Execute a SQL statement using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Type,System.String,System.Object[])">
            <summary>
            Executes a SQL statement using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type,System.String)">
            <overloads>
            Executes the query, and returns an array of business entities.
            </overloads>
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type,System.Data.CommandType,System.String)">
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The SQL statement or stored procedure name..</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type)">
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="type">Type of the business object.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Type,System.String,System.Object[])">
            <summary>
            Executes the stored procedure, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type,System.String)">
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type,System.Data.CommandType,System.String)">
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The SQL statement or stored procedure name.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <param name="commandText">The SQL statement or stored procedure name..</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes the query, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of paramters used to execute the command.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type)">
            <summary>
            Executes the query, and returns an array of business entities.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <returns>Populated list of mapped business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.ExecuteList(System.Collections.IList,System.Type,System.String,System.Object[])">
            <summary>
            Executes the stored procedure, and returns an array of business entities using the provided parameters.
            </summary>
            <param name="list">The list of mapped business objects to populate.</param>
            <param name="type">Type of the business object.</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Create">
            <summary>
            Creates instance of the database manager.
            </summary>
            <returns>Instance of the database manager class.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Open">
            <summary>
            Creates instance of the database manager and opens connection.
            </summary>
            <returns>An instance of the database manager class.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbManager.Open(System.String)">
            <summary>
            Creates instance of the database manager and opens connection for given configuration.
            </summary>
            <remarks>
            An actual connection database string is read from the <i>appSettings</i> section 
            of application configuration file (App.config, Web.config or machine.config) 
            according to the follow rule:
            <code>
            &lt;appSettings&gt;
                &lt;add key="ConnectionString.<b>configString</b>" value="..." /&gt;
            &lt;/appSettings&gt;
            </code>
            </remarks>
            <param name="configString">Configuration string.</param>
            <returns>An instance of the database manager class.</returns>
        </member>
        <member name="P:Rsdn.Framework.Data.DbManager.Connection">
            <summary>
            The connection object.
            </summary>
        </member>
        <member name="P:Rsdn.Framework.Data.DbManager.Command">
            <summary>
            The command object.
            </summary>
        </member>
        <member name="P:Rsdn.Framework.Data.DbManager.Transaction">
            <summary>
            The transaction object.
            </summary>
        </member>
        <member name="P:Rsdn.Framework.Data.DbManager.ConfigString">
            <summary>
            The transaction object.
            </summary>
        </member>
        <member name="P:Rsdn.Framework.Data.DbManager.ExceptionText">
            <summary>
            Text of the exception if it's going to occur.
            </summary>
            <remarks>
            <para>
            The property is used in the <see cref="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.String)"/> method.
            </para>
            <para>
            If there are no records in the resulting recordset, 
            the business entity cannot be constructed. In this case the 
            <see cref="T:Rsdn.Framework.Common.RsdnRecordNotFoundException"/> exception is thrown with 
            the <paramref name="ExceptionText"/> description.
            </para>
            </remarks>
            <seealso cref="M:Rsdn.Framework.Data.DbManager.ExecuteBizEntity(System.Object,System.String)">ExecuteBizEntity method</seealso>
        </member>
        <member name="T:Rsdn.Framework.Data.DbSqlManager">
            <summary>
            Implements access to MS SQL database.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Data.DbSqlManager.CreateConnectionObject">
            <summary>
            Creates the database connection object.
            </summary>
            <returns>The database connection object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbSqlManager.CreateDataAdapterObject">
            <summary>
            Creates the data adapter object.
            </summary>
            <returns>The data adapter object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.DbSqlManager.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Populates the specified IDbCommand object's Parameters collection with 
            parameter information for the stored procedure specified in the IDbCommand.
            </summary>
            <param name="command">The IDbCommand referencing the stored procedure for which the parameter information is to be derived. The derived parameters will be populated into the Parameters of this command.</param>
        </member>
        <member name="T:Rsdn.Framework.Data.MapData">
            <summary>
            Summary description for MapData.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToObject(Rsdn.Framework.Data.MapData.IMapReader,System.Object,System.String)">
            <summary>
            Maps recordset data to structure fields.
            </summary>
            <param name="dr">Data recordset object.</param>
            <param name="entity">Target object.</param>
            <param name="prefix">Recursive prefix of nested structures.</param>
            <returns>Target object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.GetParameters(System.Object,System.Collections.ArrayList,Rsdn.Framework.Data.DbManager,System.String)">
            <summary>
            Fills the <paramref name="paramList"/> array from given entity object.
            </summary>
            <param name="entity">A business entity object</param>
            <param name="paramList">A resulting list of parameters.</param>
            <param name="db">Instance of DbManager class to create parameters.</param>
            <param name="prefix">Recursive prefix of nested structures.</param>
            <returns>A resulting list of parameters.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToList(System.Collections.IList,System.Type,System.Data.DataTable)">
            <summary>
            Maps DataTable object to an array.
            </summary>
            <param name="list">The resultant array.</param>
            <param name="type">Type of the business object.</param>
            <param name="dataTable">Source DataTable object.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToList(System.Type,System.Data.DataTable)">
            <summary>
            Maps DataTable object to an ArrayList object.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="dataTable">Source DataTable object.</param>
            <returns>An array of business objects.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToBizEntity(System.Object,System.Data.DataRow)">
            <summary>
            Maps DataRow object to the business object.
            </summary>
            <param name="entity">An object to populate.</param>
            <param name="dataRow">Source DataRow object.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToBizEntity(System.Type,System.Data.DataRow)">
            <summary>
            Maps DataRow object to the business object.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="dataRow">Source DataRow object.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToBizEntity(System.Object,System.Data.DataTable)">
            <summary>
            Maps DataRow object to the business object.
            </summary>
            <param name="entity">An object to populate.</param>
            <param name="dataTable">Source DataTable object.</param>
            <returns>A business object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Data.MapData.ToBizEntity(System.Type,System.Data.DataTable)">
            <summary>
            Maps DataRow object to the business object.
            </summary>
            <param name="type">Type of the business object.</param>
            <param name="dataTable">Source DataTable object.</param>
            <returns>A business object.</returns>
        </member>
        <member name="T:Rsdn.Framework.Data.MapFieldAttribute">
            <summary>
            Is applied to any members that should be mapped on recordset field. 
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Data.MapValueAttribute">
            <summary>
            Is applied to any members that should be mapped on recordset field. 
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnObject">
            <summary>
            The base class for simple objects.
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnDisposableObject">
            <summary>
            The base class for simple disposable objects.
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.DisposableObject">
            <summary>
            Base class for classes that need to be disposed.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.Finalize">
            <summary>
            Clean up all resources.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.Dispose">
            <summary>
            Clean up all resources and delete object from the finalization queue.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.Close">
            <summary>
            Synonym of the Dispose method.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.Reopen">
            <summary>
            Must be called if object reopen any resources to return the object in the finalization queue.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Can be overridden in child classes.
            </summary>
            <param name="disposing">Equal 'true' if is called from Dispose method, otherwise from destructor</param>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.DisposeFields(System.Object)">
            <summary>
            Scans all fields of the object and call DisposeObject method if it's needed.
            This method can be used outside of the class.
            </summary>
            <param name="obj">Disposing object.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.DisposableObject.DisposeObject(System.Object)">
            <summary>
            Disposes a member in appropriate way.
            </summary>
            <param name="member">Disposing member.</param>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnMbrObject">
            <summary>
            The base class for MBR objects.
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnException">
            <summary>
            Defines the base class for exceptions.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnException.#ctor">
            <summary>
            Initializes a new instance of the RsdnException class.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the RsdnException class 
            with the specified error code and message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="errorCode">Code of the error.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RsdnException class 
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RsdnException class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SupraException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="P:Rsdn.Framework.Common.RsdnException.ErrorCode">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.RsdnRecordNotFoundException">
            <summary>
            Defines the "Record not found" exception class.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnRecordNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the SupraRecordNotFoundException class.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnRecordNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SupraRecordNotFoundException class 
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnRecordNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SupraRecordNotFoundException class 
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.RsdnRecordNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SupraRecordNotFoundException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="T:Rsdn.Framework.Common.ConfigManager">
            <summary>
            Provides access to configuration settings.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.#ctor">
            <summary>
            Since this class provides only static methods, 
            make the default constructor private to prevent instances 
            from being created with "new ConfigManager()".
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetObject(System.String)">
            <summary>
            Returns object from the configuration file for the given key.
            If string does not exist, it throws an exception.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetObject(System.String,System.Object)">
            <summary>
            Returns object from the configuration file for the given key.
            If key does not exist and defaultValue is not null, 
            it return default value. Otherwise, it throws an exception.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetString(System.String)">
            <summary>
            Returns string from the configuration file for the given key.
            If string does not exist, it throws an exception.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>Result string.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetString(System.String,System.String)">
            <summary>
            Returns string from the configuration file for the given key.
            If string does not exist, it return default value.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Result string.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetInt(System.String)">
            <summary>
            Returns value from the configuration file for the given key.
            If value does not exist, it throws an exception.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>Result value.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetInt(System.String,System.Int32)">
            <summary>
            Returns value from the configuration file for the given key.
            If value does not exist, it return default value.
            </summary>
            <param name="key">Name of the key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Result value.</returns>
        </member>
        <member name="F:Rsdn.Framework.Common.ConfigManager.connectionStrings">
            <summary>
            This table caches connection strings which were already read.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetConnectionString(System.String)">
            <summary>
            Returns connection string for given configuration.
            Connection string is read from 'appSettings' section of 
            app.config file using 'ConnectionString.ConfigurationName' key, 
            where 'ConfigurationName' is configString parameter of the method.
            </summary>
            <param name="configString">Configuration name.</param>
            <returns>Connection string.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.AddConnectionString(System.String,System.String)">
            <summary>
            Adds new connection string or replaces existing one.
            </summary>
            <param name="configString">Configuration string.</param>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManager.GetDefaultConfiguration">
            <summary>
            Returns default configuration name.
            Current implementation just returns key of first record of the cache table.
            </summary>
            <returns>Name of default configuration.</returns>
        </member>
        <member name="T:Rsdn.Framework.Common.ConfigManagerException">
            <summary>
            Configuration manager exception class.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManagerException.#ctor">
            <summary>
            Initializes a new instance of the ConfigManagerException class.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConfigManagerException class 
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
        </member>
        <member name="M:Rsdn.Framework.Common.ConfigManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ConfigManagerException class 
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
        </member>
        <member name="T:Rsdn.Framework.Common.UsingAttribute">
            <summary>
            Is applied to any members that should be disposed automatically. 
            </summary>
        </member>
        <member name="T:Rsdn.Framework.Common.Utils">
            <summary>
            Всякая полезная мелочь.
            </summary>
        </member>
        <member name="M:Rsdn.Framework.Common.Utils.HowSay(System.Int32)">
            <summary>
            Возвращает индекс, который можно использовать для построения окончаний
            слов в зависимости от значения числа.
            </summary>
            <remarks>
            Возвращаемый индекс соответствует следующим значениям:<br/>
            <list type="bullet">
            <item>0 - ноль рублей</item>
            <item>1 - один рубль</item>
            <item>2,3 - два рубля</item>
            </list>
            </remarks>
            <example>
            Следующий пример демонстрирует применение функции.
            <code>
            void Main()
            {
                string[] money = 
                {
                    "денёг",
                    "деньга",
                    "денюжки"
                };
            
                System.Console.WriteLine("1 {0}",money[HowSay(1)]);
                System.Console.WriteLine("104 {0}",money[HowSay(104)]);
                System.Console.WriteLine("58 {0}",money[HowSay(58)]);
            }
            </code>
            </example>
            <param name="n">Целое число</param>
            <returns>Индекс.</returns>
        </member>
        <member name="M:Rsdn.Framework.Common.Utils.Unescape(System.String)">
            <summary>
            Преобразует строку, содержащую escape-последовательности, к нормальному виду.
            </summary>
            <param name="str">Исходная строка.</param>
            <returns>Результирующая строка</returns>
        </member>
    </members>
</doc>
